; Experimenting with some language features, doesn't work yet

rye .needs { fynegen }

do\par fynegen {

    app_: app .window "Calculator" ; TODO -- rename app to application in Fyne

    for { label-a label-b label-op label-eq label-res } { .set!* widget-label "" }   ; TODO -- make set accept words too [DONE]

    data: context {
        a: b: res: op: ""
        cur: 'a   ; cursor on a or b
        get: does { do [ cur ] }
        set: fn { v } { .change! ?cur }
        res!: fn { v } { .change! 'res }
        cur!: fn { v } { .change! 'cur }
        op!: fn { v } { .change! 'op }
        clear: does { for { a b res op } { .change!* "" } } ; change! 'a 'cur
    }
    
    ui: context {
        sync: does {
            label-a .set-text data/a
            label-b .set-text data/b
            label-res .set-text data/res
            data/op .to-string .third .fix { "" } \set-text* label-op 
        }
        eq!: fn { v } { .set-text* label-eq }
    }
    empty-spot: does { widget-label "" }

    change-current-text: fn { f } {
        data/set f data/get , update
    }
    
    make-num-button: fn { n } {
        widget-button n closure { } {
            change-current-text fn { text } { text + n }
        }
    }

    update: does {
        if data/cur = 'b {
            either any { data/a = "" data/b = "" } {
                data/res! "" , ui/eq! ""
            } {
                do [ data/a .to-integer data/op  data/b .to-integer ]
                \to-string \data/res! ,
                ui/eq! "="
            }
        }
        ui/sync
    }

    eval: does { data/clear , data/cur! 'a , update }
    
    set-op: fn { op } {
        if data/cur = 'b { eval }
        if all { data/cur = 'a  not data/a = "" } {
            data/op! first op , data/cur! 'b , ui/sync
        }
    }

    delete-digit: does {
        either all { current = 1 text-b = "" } {
            change! 0 'current
            ui/op! ""
            update
        } {
            change-current-text fn { text } {
                new-len: text .length? - 1
                new-text: text .head new-len
                if new-text = "-" {
                    dec! 'new-len
                    change! new-text .head new-len 'new-text
                }
                new-text
            }
        }
    }

    negate-current: does {
        change-current-text fn { text } {
            ^if text = "" { "" }
            0 - data/get .to-integer \to-string \data/set , ui/sync
        }
    }
    
    app_ |set-content container-border
    container-h-box [ label-a label-op label-b label-eq label-res ]
    0 0 0 ; Use 0 for nil
    [ container-grid-with-columns 4
        unpack [
            empty-spot
            widget-button "C" does { data/clear , ui/eq! "" , update }
            widget-button "Del" does { delete-digit }
            widget-button "+" does { set-op { + } }

            map { "7" "8" "9" } { .make-num-button }
            widget-button "-" does { set-op { - } }
            
            map { "4" "5" "6" } { .make-num-button }
            widget-button "*" does { set-op { * } }

            map { "1" "2" "3" } { .make-num-button }
            empty-spot

            widget-button "+/-" does { negate-current  }
            make-num-button "0"
            empty-spot
            widget-button "=" does { eval }
        ]
    ]
    |resize fyne-size 320.0 320.0
    |show-and-run
}
