//go:build b_fynegen

// Code generated by generator/generate. DO NOT EDIT.

package fynegen

import (
	"errors"
	"net/url"

	"github.com/refaktor/rye/env"
	"github.com/refaktor/rye/evaldo"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/driver/desktop"
	"fyne.io/fyne/v2/driver/mobile"
	"fyne.io/fyne/v2/widget"
)

var Builtins_fynegen = map[string]*env.Builtin{
	"fyne-vector-2//is-zero": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			res := arg0Val.IsZero()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-double-tappable//double-tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "double-tapped")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.DoubleTappable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "double-tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "double-tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "double-tapped")
			}
			arg0Val.DoubleTapped(arg1Val)
			return arg0Nat
		},
	},
	"fyne-driver//create-window": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-window")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-window")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "create-window")
			}
			res := arg0Val.CreateWindow(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "fyne-window")
		},
	},
	"fyne-driver//all-windows": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "all-windows")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "all-windows")
			}
			res := arg0Val.AllWindows()
			return *env.NewNative(ps.Idx, res, "fyne-window-arr")
		},
	},
	"fyne-driver//canvas-for-object": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "canvas-for-object")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "canvas-for-object")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "canvas-for-object")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "canvas-for-object")
			}
			res := arg0Val.CanvasForObject(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-canvas")
		},
	},
	"fyne-driver//absolute-position-for-object": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "absolute-position-for-object")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "absolute-position-for-object")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "absolute-position-for-object")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "absolute-position-for-object")
			}
			res := arg0Val.AbsolutePositionForObject(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"fyne-driver//device": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "device")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "device")
			}
			res := arg0Val.Device()
			return *env.NewNative(ps.Idx, res, "fyne-device")
		},
	},
	"fyne-driver//run": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "run")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "run")
			}
			arg0Val.Run()
			return arg0Nat
		},
	},
	"fyne-driver//quit": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "quit")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "quit")
			}
			arg0Val.Quit()
			return arg0Nat
		},
	},
	"fyne-driver//start-animation": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "start-animation")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "start-animation")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "start-animation")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.Animation)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "start-animation")
			}
			arg0Val.StartAnimation(arg1Val)
			return arg0Nat
		},
	},
	"fyne-driver//stop-animation": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "stop-animation")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Driver)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "stop-animation")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "stop-animation")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.Animation)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "stop-animation")
			}
			arg0Val.StopAnimation(arg1Val)
			return arg0Nat
		},
	},
	"fyne-device//orientation": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "orientation")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Device)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "orientation")
			}
			res := arg0Val.Orientation()
			return *env.NewNative(ps.Idx, res, "fyne-device-orientation")
		},
	},
	"fyne-device//is-mobile": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-mobile")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Device)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-mobile")
			}
			res := arg0Val.IsMobile()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-device//is-browser": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-browser")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Device)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-browser")
			}
			res := arg0Val.IsBrowser()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-device//has-keyboard": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "has-keyboard")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Device)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "has-keyboard")
			}
			res := arg0Val.HasKeyboard()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-device//system-scale-for-window": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "system-scale-for-window")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Device)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "system-scale-for-window")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "system-scale-for-window")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "system-scale-for-window")
			}
			res := arg0Val.SystemScaleForWindow(arg1Val)
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"fyne-layout//layout": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "layout")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Layout)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "layout")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "layout")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "layout")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "layout")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "layout")
			}
			arg0Val.Layout(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"fyne-layout//min-size": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Layout)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "min-size")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-settings//theme": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "theme")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "theme")
			}
			res := arg0Val.Theme()
			return *env.NewNative(ps.Idx, res, "fyne-theme")
		},
	},
	"fyne-settings//set-theme": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-theme")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-theme")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-theme")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Theme)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-theme")
			}
			arg0Val.SetTheme(arg1Val)
			return arg0Nat
		},
	},
	"fyne-settings//theme-variant": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "theme-variant")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "theme-variant")
			}
			res := arg0Val.ThemeVariant()
			return *env.NewNative(ps.Idx, res, "fyne-theme-variant")
		},
	},
	"fyne-settings//scale": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scale")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scale")
			}
			res := arg0Val.Scale()
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"fyne-settings//primary-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "primary-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "primary-color")
			}
			res := arg0Val.PrimaryColor()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-settings//build-type": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "build-type")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "build-type")
			}
			res := arg0Val.BuildType()
			return *env.NewNative(ps.Idx, res, "fyne-build-type")
		},
	},
	"fyne-settings//show-animations": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-animations")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Settings)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-animations")
			}
			res := arg0Val.ShowAnimations()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-rich-text-segment//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-rich-text-segment//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-rich-text-segment//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-rich-text-segment//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-rich-text-segment//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-rich-text-segment//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-rich-text-segment//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"fyne-preferences//bool": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "bool")
			}
			res := arg0Val.Bool(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-preferences//bool-with-fallback": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool-with-fallback")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool-with-fallback")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "bool-with-fallback")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "bool-with-fallback")
			}
			res := arg0Val.BoolWithFallback(arg1Str.Value, arg2Int.Value != 0)
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-preferences//set-bool": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-bool")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-bool")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-bool")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "set-bool")
			}
			arg0Val.SetBool(arg1Str.Value, arg2Int.Value != 0)
			return arg0Nat
		},
	},
	"fyne-preferences//bool-list": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool-list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bool-list")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "bool-list")
			}
			res := arg0Val.BoolList(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "bool-arr")
		},
	},
	"fyne-preferences//float": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "float")
			}
			res := arg0Val.Float(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "float64")
		},
	},
	"fyne-preferences//float-with-fallback": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float-with-fallback")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float-with-fallback")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "float-with-fallback")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "float-with-fallback")
			}
			res := arg0Val.FloatWithFallback(arg1Str.Value, arg2Dec.Value)
			return *env.NewNative(ps.Idx, res, "float64")
		},
	},
	"fyne-preferences//set-float": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-float")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-float")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-float")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "set-float")
			}
			arg0Val.SetFloat(arg1Str.Value, arg2Dec.Value)
			return arg0Nat
		},
	},
	"fyne-preferences//float-list": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float-list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "float-list")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "float-list")
			}
			res := arg0Val.FloatList(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "float64-arr")
		},
	},
	"fyne-preferences//int": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "int")
			}
			res := arg0Val.Int(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-preferences//int-with-fallback": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int-with-fallback")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int-with-fallback")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "int-with-fallback")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "int-with-fallback")
			}
			res := arg0Val.IntWithFallback(arg1Str.Value, int(arg2Int.Value))
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-preferences//set-int": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-int")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-int")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-int")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "set-int")
			}
			arg0Val.SetInt(arg1Str.Value, int(arg2Int.Value))
			return arg0Nat
		},
	},
	"fyne-preferences//int-list": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int-list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "int-list")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "int-list")
			}
			res := arg0Val.IntList(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "int-arr")
		},
	},
	"fyne-preferences//string": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "string")
			}
			res := arg0Val.String(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-preferences//string-with-fallback": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string-with-fallback")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string-with-fallback")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "string-with-fallback")
			}
			arg2Str, ok := arg2.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.StringType}, "string-with-fallback")
			}
			res := arg0Val.StringWithFallback(arg1Str.Value, arg2Str.Value)
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-preferences//set-string": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-string")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-string")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-string")
			}
			arg2Str, ok := arg2.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.StringType}, "set-string")
			}
			arg0Val.SetString(arg1Str.Value, arg2Str.Value)
			return arg0Nat
		},
	},
	"fyne-preferences//string-list": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string-list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string-list")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "string-list")
			}
			res := arg0Val.StringList(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "string-arr")
		},
	},
	"fyne-preferences//remove-value": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-value")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Preferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-value")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "remove-value")
			}
			arg0Val.RemoveValue(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-cloud-provider-preferences//cloud-preferences": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-preferences")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProviderPreferences)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-preferences")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cloud-preferences")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cloud-preferences")
			}
			res := arg0Val.CloudPreferences(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-preferences")
		},
	},
	"fyne-draggable//dragged": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Draggable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.DragEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val.Dragged(arg1Val)
			return arg0Nat
		},
	},
	"fyne-draggable//drag-end": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Draggable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val.DragEnd()
			return arg0Nat
		},
	},
	"fyne-scrollable//scrolled": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scrolled")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Scrollable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scrolled")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "scrolled")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.ScrollEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "scrolled")
			}
			arg0Val.Scrolled(arg1Val)
			return arg0Nat
		},
	},
	"fyne-validatable//validate": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "validate")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Validatable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "validate")
			}
			res := arg0Val.Validate()
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"fyne-window//title": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "title")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "title")
			}
			res := arg0Val.Title()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-window//set-title": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-title")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-title")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-title")
			}
			arg0Val.SetTitle(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-window//full-screen": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "full-screen")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "full-screen")
			}
			res := arg0Val.FullScreen()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-window//set-full-screen": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-full-screen")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-full-screen")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-full-screen")
			}
			arg0Val.SetFullScreen(arg1Int.Value != 0)
			return arg0Nat
		},
	},
	"fyne-window//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"fyne-window//request-focus": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "request-focus")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "request-focus")
			}
			arg0Val.RequestFocus()
			return arg0Nat
		},
	},
	"fyne-window//fixed-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fixed-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fixed-size")
			}
			res := arg0Val.FixedSize()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-window//set-fixed-size": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-fixed-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-fixed-size")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-fixed-size")
			}
			arg0Val.SetFixedSize(arg1Int.Value != 0)
			return arg0Nat
		},
	},
	"fyne-window//center-on-screen": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "center-on-screen")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "center-on-screen")
			}
			arg0Val.CenterOnScreen()
			return arg0Nat
		},
	},
	"fyne-window//padded": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "padded")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "padded")
			}
			res := arg0Val.Padded()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-window//set-padded": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-padded")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-padded")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-padded")
			}
			arg0Val.SetPadded(arg1Int.Value != 0)
			return arg0Nat
		},
	},
	"fyne-window//icon": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			res := arg0Val.Icon()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-window//set-icon": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val.SetIcon(arg1Val)
			return arg0Nat
		},
	},
	"fyne-window//set-master": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-master")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-master")
			}
			arg0Val.SetMaster()
			return arg0Nat
		},
	},
	"fyne-window//main-menu": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "main-menu")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "main-menu")
			}
			res := arg0Val.MainMenu()
			return *env.NewNative(ps.Idx, res, "fyne-main-menu-ptr")
		},
	},
	"fyne-window//set-main-menu": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-main-menu")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-main-menu")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-main-menu")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.MainMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-main-menu")
			}
			arg0Val.SetMainMenu(arg1Val)
			return arg0Nat
		},
	},
	"fyne-window//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"fyne-window//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"fyne-window//close": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close")
			}
			arg0Val.Close()
			return arg0Nat
		},
	},
	"fyne-window//show-and-run": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-and-run")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-and-run")
			}
			arg0Val.ShowAndRun()
			return arg0Nat
		},
	},
	"fyne-window//content": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			res := arg0Val.Content()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"fyne-window//set-content": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val.SetContent(arg1Val)
			return arg0Nat
		},
	},
	"fyne-window//canvas": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "canvas")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "canvas")
			}
			res := arg0Val.Canvas()
			return *env.NewNative(ps.Idx, res, "fyne-canvas")
		},
	},
	"fyne-window//clipboard": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "clipboard")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Window)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "clipboard")
			}
			res := arg0Val.Clipboard()
			return *env.NewNative(ps.Idx, res, "fyne-clipboard")
		},
	},
	"fyne-widget//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"fyne-canvas-object//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-canvas-object//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas-object//position": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			res := arg0Val.Position()
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"fyne-canvas-object//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas-object//size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			res := arg0Val.Size()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-canvas-object//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"fyne-canvas-object//visible": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			res := arg0Val.Visible()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-canvas-object//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"fyne-canvas-object//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"fyne-cloud-provider//provider-description": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-description")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-description")
			}
			res := arg0Val.ProviderDescription()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-cloud-provider//provider-icon": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-icon")
			}
			res := arg0Val.ProviderIcon()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-cloud-provider//provider-name": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-name")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "provider-name")
			}
			res := arg0Val.ProviderName()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-cloud-provider//cleanup": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cleanup")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cleanup")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cleanup")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cleanup")
			}
			arg0Val.Cleanup(arg1Val)
			return arg0Nat
		},
	},
	"fyne-cloud-provider//setup": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "setup")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "setup")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "setup")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "setup")
			}
			res := arg0Val.Setup(arg1Val)
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"fyne-resource//name": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "name")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "name")
			}
			res := arg0Val.Name()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-resource//content": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			res := arg0Val.Content()
			return *env.NewNative(ps.Idx, res, "byte-arr")
		},
	},
	"fyne-storage//root-uri": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "root-uri")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Storage)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "root-uri")
			}
			res := arg0Val.RootURI()
			return *env.NewNative(ps.Idx, res, "fyne-uri")
		},
	},
	"fyne-storage//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Storage)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "remove")
			}
			res := arg0Val.Remove(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"fyne-storage//list": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Storage)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "list")
			}
			res := arg0Val.List()
			return *env.NewNative(ps.Idx, res, "string-arr")
		},
	},
	"fyne-disableable//enable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Disableable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val.Enable()
			return arg0Nat
		},
	},
	"fyne-disableable//disable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Disableable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val.Disable()
			return arg0Nat
		},
	},
	"fyne-disableable//disabled": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Disableable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			res := arg0Val.Disabled()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-app//window": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "window")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "window")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "window")
			}
			res := arg0Val.NewWindow(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "fyne-window")
		},
	},
	"fyne-app//open-url": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open-url")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open-url")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "open-url")
			}
			arg1Val, ok := arg1Nat.Value.(*url.URL)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "open-url")
			}
			res := arg0Val.OpenURL(arg1Val)
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"fyne-app//icon": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			res := arg0Val.Icon()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-app//set-icon": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val.SetIcon(arg1Val)
			return arg0Nat
		},
	},
	"fyne-app//run": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "run")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "run")
			}
			arg0Val.Run()
			return arg0Nat
		},
	},
	"fyne-app//quit": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "quit")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "quit")
			}
			arg0Val.Quit()
			return arg0Nat
		},
	},
	"fyne-app//driver": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "driver")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "driver")
			}
			res := arg0Val.Driver()
			return *env.NewNative(ps.Idx, res, "fyne-driver")
		},
	},
	"fyne-app//unique-id": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unique-id")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unique-id")
			}
			res := arg0Val.UniqueID()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-app//send-notification": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "send-notification")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "send-notification")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "send-notification")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.Notification)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "send-notification")
			}
			arg0Val.SendNotification(arg1Val)
			return arg0Nat
		},
	},
	"fyne-app//settings": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "settings")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "settings")
			}
			res := arg0Val.Settings()
			return *env.NewNative(ps.Idx, res, "fyne-settings")
		},
	},
	"fyne-app//preferences": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "preferences")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "preferences")
			}
			res := arg0Val.Preferences()
			return *env.NewNative(ps.Idx, res, "fyne-preferences")
		},
	},
	"fyne-app//storage": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "storage")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "storage")
			}
			res := arg0Val.Storage()
			return *env.NewNative(ps.Idx, res, "fyne-storage")
		},
	},
	"fyne-app//lifecycle": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "lifecycle")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "lifecycle")
			}
			res := arg0Val.Lifecycle()
			return *env.NewNative(ps.Idx, res, "fyne-lifecycle")
		},
	},
	"fyne-app//metadata": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "metadata")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "metadata")
			}
			res := arg0Val.Metadata()
			return *env.NewNative(ps.Idx, res, "fyne-app-metadata")
		},
	},
	"fyne-app//cloud-provider": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-provider")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-provider")
			}
			res := arg0Val.CloudProvider()
			return *env.NewNative(ps.Idx, res, "fyne-cloud-provider")
		},
	},
	"fyne-app//set-cloud-provider": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-cloud-provider")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-cloud-provider")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-cloud-provider")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CloudProvider)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-cloud-provider")
			}
			arg0Val.SetCloudProvider(arg1Val)
			return arg0Nat
		},
	},
	"fyne-tabbable//accepts-tab": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "accepts-tab")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Tabbable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "accepts-tab")
			}
			res := arg0Val.AcceptsTab()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-tappable//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Tappable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"fyne-legacy-theme//background-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			res := arg0Val.BackgroundColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//button-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "button-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "button-color")
			}
			res := arg0Val.ButtonColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//disabled-button-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled-button-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled-button-color")
			}
			res := arg0Val.DisabledButtonColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//text-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			res := arg0Val.TextColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//disabled-text-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled-text-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled-text-color")
			}
			res := arg0Val.DisabledTextColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//place-holder-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "place-holder-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "place-holder-color")
			}
			res := arg0Val.PlaceHolderColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//primary-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "primary-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "primary-color")
			}
			res := arg0Val.PrimaryColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//hover-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hover-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hover-color")
			}
			res := arg0Val.HoverColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//focus-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-color")
			}
			res := arg0Val.FocusColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//scroll-bar-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-color")
			}
			res := arg0Val.ScrollBarColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//shadow-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "shadow-color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "shadow-color")
			}
			res := arg0Val.ShadowColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-legacy-theme//text-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-size")
			}
			res := arg0Val.TextSize()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-legacy-theme//text-font": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-font")
			}
			res := arg0Val.TextFont()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-legacy-theme//text-bold-font": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-bold-font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-bold-font")
			}
			res := arg0Val.TextBoldFont()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-legacy-theme//text-italic-font": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-italic-font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-italic-font")
			}
			res := arg0Val.TextItalicFont()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-legacy-theme//text-bold-italic-font": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-bold-italic-font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-bold-italic-font")
			}
			res := arg0Val.TextBoldItalicFont()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-legacy-theme//text-monospace-font": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-monospace-font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-monospace-font")
			}
			res := arg0Val.TextMonospaceFont()
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-legacy-theme//padding": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "padding")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "padding")
			}
			res := arg0Val.Padding()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-legacy-theme//icon-inline-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon-inline-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon-inline-size")
			}
			res := arg0Val.IconInlineSize()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-legacy-theme//scroll-bar-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-size")
			}
			res := arg0Val.ScrollBarSize()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-legacy-theme//scroll-bar-small-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-small-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.LegacyTheme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scroll-bar-small-size")
			}
			res := arg0Val.ScrollBarSmallSize()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-cloud-provider-storage//cloud-storage": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-storage")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CloudProviderStorage)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cloud-storage")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cloud-storage")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "cloud-storage")
			}
			res := arg0Val.CloudStorage(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-storage")
		},
	},
	"fyne-overlay-stack//add": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.OverlayStack)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg0Val.Add(arg1Val)
			return arg0Nat
		},
	},
	"fyne-overlay-stack//list": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "list")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.OverlayStack)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "list")
			}
			res := arg0Val.List()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object-arr")
		},
	},
	"fyne-overlay-stack//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.OverlayStack)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg0Val.Remove(arg1Val)
			return arg0Nat
		},
	},
	"fyne-overlay-stack//top": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "top")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.OverlayStack)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "top")
			}
			res := arg0Val.Top()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"fyne-canvas//content": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			res := arg0Val.Content()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"fyne-canvas//set-content": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val.SetContent(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas//refresh": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "refresh")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas//focus": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "focus")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Focusable)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "focus")
			}
			arg0Val.Focus(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas//focus-next": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-next")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-next")
			}
			arg0Val.FocusNext()
			return arg0Nat
		},
	},
	"fyne-canvas//focus-previous": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-previous")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-previous")
			}
			arg0Val.FocusPrevious()
			return arg0Nat
		},
	},
	"fyne-canvas//unfocus": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unfocus")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unfocus")
			}
			arg0Val.Unfocus()
			return arg0Nat
		},
	},
	"fyne-canvas//focused": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focused")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focused")
			}
			res := arg0Val.Focused()
			return *env.NewNative(ps.Idx, res, "fyne-focusable")
		},
	},
	"fyne-canvas//size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			res := arg0Val.Size()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-canvas//scale": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scale")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "scale")
			}
			res := arg0Val.Scale()
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"fyne-canvas//overlays": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "overlays")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "overlays")
			}
			res := arg0Val.Overlays()
			return *env.NewNative(ps.Idx, res, "fyne-overlay-stack")
		},
	},
	"fyne-canvas//remove-shortcut": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-shortcut")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-shortcut")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove-shortcut")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Shortcut)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove-shortcut")
			}
			arg0Val.RemoveShortcut(arg1Val)
			return arg0Nat
		},
	},
	"fyne-canvas//capture": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "capture")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "capture")
			}
			res := arg0Val.Capture()
			return *env.NewNative(ps.Idx, res, "image-image")
		},
	},
	"fyne-focusable//focus-gained": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Focusable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val.FocusGained()
			return arg0Nat
		},
	},
	"fyne-focusable//focus-lost": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Focusable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val.FocusLost()
			return arg0Nat
		},
	},
	"fyne-focusable//typed-key": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Focusable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val.TypedKey(arg1Val)
			return arg0Nat
		},
	},
	"widget-toolbar-item//toolbar-object": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "toolbar-object")
			}
			arg0Val, ok := arg0Nat.Value.(widget.ToolbarItem)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "toolbar-object")
			}
			res := arg0Val.ToolbarObject()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-text-grid-style//text-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			arg0Val, ok := arg0Nat.Value.(widget.TextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			res := arg0Val.TextColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"widget-text-grid-style//background-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			arg0Val, ok := arg0Nat.Value.(widget.TextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			res := arg0Val.BackgroundColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-shortcutable//typed-shortcut": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Shortcutable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Shortcut)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val.TypedShortcut(arg1Val)
			return arg0Nat
		},
	},
	"fyne-theme//color": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "color")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Theme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "color")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "color")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.ThemeColorName)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "color")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "color")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.ThemeVariant)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "color")
			}
			res := arg0Val.Color(arg1Val, arg2Val)
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"fyne-theme//font": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "font")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Theme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "font")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "font")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.TextStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "font")
			}
			res := arg0Val.Font(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-theme//icon": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Theme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "icon")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "icon")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.ThemeIconName)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "icon")
			}
			res := arg0Val.Icon(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-resource")
		},
	},
	"fyne-theme//size": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Theme)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "size")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.ThemeSizeName)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "size")
			}
			res := arg0Val.Size(arg1Val)
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"fyne-secondary-tappable//tapped-secondary": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.SecondaryTappable)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val.TappedSecondary(arg1Val)
			return arg0Nat
		},
	},
	"fyne-clipboard//content": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Clipboard)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			res := arg0Val.Content()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-clipboard//set-content": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Clipboard)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-content")
			}
			arg0Val.SetContent(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-widget-renderer//destroy": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "destroy")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.WidgetRenderer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "destroy")
			}
			arg0Val.Destroy()
			return arg0Nat
		},
	},
	"fyne-widget-renderer//layout": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "layout")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.WidgetRenderer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "layout")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "layout")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "layout")
			}
			arg0Val.Layout(arg1Val)
			return arg0Nat
		},
	},
	"fyne-widget-renderer//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.WidgetRenderer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-widget-renderer//objects": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "objects")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.WidgetRenderer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "objects")
			}
			res := arg0Val.Objects()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object-arr")
		},
	},
	"fyne-widget-renderer//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.WidgetRenderer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-rich-text-block//segments": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			arg0Val, ok := arg0Nat.Value.(widget.RichTextBlock)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			res := arg0Val.Segments()
			return *env.NewNative(ps.Idx, res, "widget-rich-text-segment-arr")
		},
	},
	"widget-label-ptr//set-text": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-text")
			}
			arg0Val.SetText(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//show-at-relative-position": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg0Val.ShowAtRelativePosition(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//set-items": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-items")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-items")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-items")
			}
			arg1Val, ok := arg1Nat.Value.([]*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-items")
			}
			arg0Val.SetItems(arg1Val)
			return arg0Nat
		},
	},
	"widget-separator-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-text-grid-ptr//set-text": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-text")
			}
			arg0Val.SetText(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-base-widget-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-menu-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-file-icon-ptr//set-uri": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-uri")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.FileIcon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-uri")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-uri")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.URI)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-uri")
			}
			arg0Val.SetURI(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//select-tab": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-tab")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-tab")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select-tab")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select-tab")
			}
			arg0Val.SelectTab(arg1Val)
			return arg0Nat
		},
	},
	"widget-form-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-label-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"fyne-container-ptr//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg0Val.Remove(arg1Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"fyne-square-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-square-size")
			}
			res := fyne.NewSquareSize(float32(arg0Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-entry-ptr//focus-gained": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val.FocusGained()
			return arg0Nat
		},
	},
	"widget-paragraph-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//disabled": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			res := arg0Val.Disabled()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-progress-bar-ptr//set-value": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-value")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBar)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-value")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "set-value")
			}
			arg0Val.SetValue(arg1Dec.Value)
			return arg0Nat
		},
	},
	"widget-progress-bar-ptr//unbind": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBar)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val.Unbind()
			return arg0Nat
		},
	},
	"widget-list-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-entry": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewEntry()
			return *env.NewNative(ps.Idx, res, "widget-entry-ptr")
		},
	},
	"container": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Layout)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container")
			}
			res := container.New(arg0Val, arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"container-doc-tabs-ptr//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg0Val.Remove(arg1Val)
			return arg0Nat
		},
	},
	"widget-accordion-ptr//append": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg1Val, ok := arg1Nat.Value.(*widget.AccordionItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg0Val.Append(arg1Val)
			return arg0Nat
		},
	},
	"fyne-static-resource-ptr//name": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "name")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.StaticResource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "name")
			}
			res := arg0Val.Name()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-paragraph-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-menu-ptr//deactivate-last-submenu": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "deactivate-last-submenu")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "deactivate-last-submenu")
			}
			res := arg0Val.DeactivateLastSubmenu()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-hyperlink-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"fyne-position//add-xy": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-xy")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-xy")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "add-xy")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "add-xy")
			}
			res := arg0Val.AddXY(float32(arg1Dec.Value), float32(arg2Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-select-entry-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-size//is-zero": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			res := arg0Val.IsZero()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-entry-ptr//append": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "append")
			}
			arg0Val.Append(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-text-grid-ptr//set-row": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-row")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-row")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-row")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "set-row")
			}
			arg2Val, ok := arg2Nat.Value.(widget.TextGridRow)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "set-row")
			}
			arg0Val.SetRow(int(arg1Int.Value), arg2Val)
			return arg0Nat
		},
	},
	"widget-disableable-widget-ptr//disable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.DisableableWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val.Disable()
			return arg0Nat
		},
	},
	"fyne-is-horizontal": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-is-horizontal")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.DeviceOrientation)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-is-horizontal")
			}
			res := fyne.IsHorizontal(arg0Val)
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-hyperlink-ptr//cursor": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cursor")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cursor")
			}
			res := arg0Val.Cursor()
			return *env.NewNative(ps.Idx, res, "desktop-cursor")
		},
	},
	"fyne-delta": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-delta")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-delta")
			}
			res := fyne.NewDelta(float32(arg0Dec.Value), float32(arg1Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-delta")
		},
	},
	"fyne-container-ptr//add": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg0Val.Add(arg1Val)
			return arg0Nat
		},
	},
	"widget-list-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//keyboard": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "keyboard")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "keyboard")
			}
			res := arg0Val.Keyboard()
			return *env.NewNative(ps.Idx, res, "mobile-keyboard-type")
		},
	},
	"widget-label": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-label")
			}
			res := widget.NewLabel(arg0Str.Value)
			return *env.NewNative(ps.Idx, res, "widget-label-ptr")
		},
	},
	"container-doc-tabs-ptr//disable-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "disable-index")
			}
			arg0Val.DisableIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-border": {
		Argsn: 5,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-border")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-border")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-border")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-border")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "container-border")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "container-border")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "container-border")
			}
			arg3Val, ok := arg3Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "container-border")
			}
			arg4Nat, ok := arg4.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 4, []env.Type{env.NativeType}, "container-border")
			}
			arg4Val, ok := arg4Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 4, []env.Type{env.NativeType}, "container-border")
			}
			res := container.NewBorder(arg0Val, arg1Val, arg2Val, arg3Val, arg4Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-entry-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-entry-ptr//tapped-secondary": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val.TappedSecondary(arg1Val)
			return arg0Nat
		},
	},
	"widget-menu-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-separator-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Separator)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-hyperlink-ptr//set-url-from-string": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-url-from-string")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-url-from-string")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-url-from-string")
			}
			res := arg0Val.SetURLFromString(arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"widget-progress-bar-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBar)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-accordion-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-toolbar-action-ptr//toolbar-object": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "toolbar-object")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ToolbarAction)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "toolbar-object")
			}
			res := arg0Val.ToolbarObject()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-text-grid-ptr//row": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "row")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "row")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "row")
			}
			res := arg0Val.Row(int(arg1Int.Value))
			return *env.NewNative(ps.Idx, res, "widget-text-grid-row")
		},
	},
	"fyne-size//subtract": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "subtract")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "subtract")
			}
			res := arg0Val.Subtract(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-text-grid-ptr//set-cell": {
		Argsn: 4,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-cell")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-cell")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-cell")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "set-cell")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "set-cell")
			}
			arg3Val, ok := arg3Nat.Value.(widget.TextGridCell)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "set-cell")
			}
			arg0Val.SetCell(int(arg1Int.Value), int(arg2Int.Value), arg3Val)
			return arg0Nat
		},
	},
	"widget-base-widget-ptr//extend-base-widget": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val.ExtendBaseWidget(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"container-scroll": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-scroll")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-scroll")
			}
			res := container.NewScroll(arg0Val)
			return *env.NewNative(ps.Idx, res, "container-scroll-ptr")
		},
	},
	"widget-separator-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-show-pop-up-menu-at-relative-position": {
		Argsn: 4,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			arg3Val, ok := arg3Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-relative-position")
			}
			widget.ShowPopUpMenuAtRelativePosition(arg0Val, arg1Val, arg2Val, arg3Val)
			return nil
		},
	},
	"widget-select-entry-ptr//enable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val.Enable()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//select-tab-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-tab-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-tab-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "select-tab-index")
			}
			arg0Val.SelectTabIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//append": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg0Val.Append(arg1Val)
			return arg0Nat
		},
	},
	"widget-pop-up-menu-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-rich-text-with-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-rich-text-with-text")
			}
			res := widget.NewRichTextWithText(arg0Str.Value)
			return *env.NewNative(ps.Idx, res, "widget-rich-text-ptr")
		},
	},
	"widget-separator-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//set-text": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-text")
			}
			arg0Val.SetText(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-container-with-layout": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container-with-layout")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Layout)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container-with-layout")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "fyne-container-with-layout")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "fyne-container-with-layout")
			}
			res := fyne.NewContainerWithLayout(arg0Val, arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-accordion-ptr//close-all": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close-all")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close-all")
			}
			arg0Val.CloseAll()
			return arg0Nat
		},
	},
	"container-grid-wrap": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-grid-wrap")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-grid-wrap")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-wrap")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-wrap")
			}
			res := container.NewGridWrap(arg0Val, arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-entry-ptr//bind": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg1Val, ok := arg1Nat.Value.(binding.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg0Val.Bind(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-paragraph-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-text-grid-ptr//set-row-style": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-row-style")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-row-style")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-row-style")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "set-row-style")
			}
			arg2Val, ok := arg2Nat.Value.(widget.TextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "set-row-style")
			}
			arg0Val.SetRowStyle(int(arg1Int.Value), arg2Val)
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-pop-up-menu-ptr//show-at-position": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-position")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-position")
			}
			arg0Val.ShowAtPosition(arg1Val)
			return arg0Nat
		},
	},
	"widget-hyperlink": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-hyperlink")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-hyperlink")
			}
			arg1Val, ok := arg1Nat.Value.(*url.URL)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-hyperlink")
			}
			res := widget.NewHyperlink(arg0Str.Value, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-hyperlink-ptr")
		},
	},
	"widget-show-modal-pop-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-modal-pop-up")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-modal-pop-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-modal-pop-up")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-modal-pop-up")
			}
			widget.ShowModalPopUp(arg0Val, arg1Val)
			return nil
		},
	},
	"widget-hyperlink-ptr//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg0Val.Remove(arg1Val)
			return arg0Nat
		},
	},
	"container-h-split": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-split")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-split")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-h-split")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-h-split")
			}
			res := container.NewHSplit(arg0Val, arg1Val)
			return *env.NewNative(ps.Idx, res, "container-split-ptr")
		},
	},
	"widget-custom-text-grid-style-ptr//text-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.CustomTextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text-color")
			}
			res := arg0Val.TextColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"widget-show-pop-up-menu-at-position": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-menu-at-position")
			}
			widget.ShowPopUpMenuAtPosition(arg0Val, arg1Val, arg2Val)
			return nil
		},
	},
	"fyne-notification": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "fyne-notification")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "fyne-notification")
			}
			res := fyne.NewNotification(arg0Str.Value, arg1Str.Value)
			return *env.NewNative(ps.Idx, res, "fyne-notification-ptr")
		},
	},
	"widget-accordion-ptr//open": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "open")
			}
			arg0Val.Open(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"widget-entry-ptr//enable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val.Enable()
			return arg0Nat
		},
	},
	"fyne-set-current-app": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-set-current-app")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.App)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-set-current-app")
			}
			fyne.SetCurrentApp(arg0Val)
			return nil
		},
	},
	"widget-slider-ptr//unbind": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val.Unbind()
			return arg0Nat
		},
	},
	"widget-entry-ptr//set-text": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-text")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-text")
			}
			arg0Val.SetText(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-file-icon-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.FileIcon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-tab-item-with-icon": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "container-tab-item-with-icon")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-tab-item-with-icon")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-tab-item-with-icon")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "container-tab-item-with-icon")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "container-tab-item-with-icon")
			}
			res := container.NewTabItemWithIcon(arg0Str.Value, arg1Val, arg2Val)
			return *env.NewNative(ps.Idx, res, "container-tab-item-ptr")
		},
	},
	"widget-menu-ptr//activate-last-submenu": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-last-submenu")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-last-submenu")
			}
			res := arg0Val.ActivateLastSubmenu()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"container-center": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-center")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-center")
			}
			res := container.NewCenter(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"fyne-container-ptr//add-object": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-object")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-object")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add-object")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add-object")
			}
			arg0Val.AddObject(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-app-tabs": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-app-tabs")
			}
			arg0Val, ok := arg0Nat.Value.([]*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-app-tabs")
			}
			res := container.NewAppTabs(arg0Val...)
			return *env.NewNative(ps.Idx, res, "container-app-tabs-ptr")
		},
	},
	"fyne-max": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-max")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-max")
			}
			res := fyne.Max(float32(arg0Dec.Value), float32(arg1Dec.Value))
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"widget-card-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-progress-bar-ptr//bind": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBar)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg1Val, ok := arg1Nat.Value.(binding.Float)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg0Val.Bind(arg1Val)
			return arg0Nat
		},
	},
	"widget-accordion": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-accordion")
			}
			arg0Val, ok := arg0Nat.Value.([]*widget.AccordionItem)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-accordion")
			}
			res := widget.NewAccordion(arg0Val...)
			return *env.NewNative(ps.Idx, res, "widget-accordion-ptr")
		},
	},
	"widget-form-ptr//append-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append-item")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append-item")
			}
			arg1Val, ok := arg1Nat.Value.(*widget.FormItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append-item")
			}
			arg0Val.AppendItem(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//mouse-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-up")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-up")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-up")
			}
			arg0Val.MouseUp(arg1Val)
			return arg0Nat
		},
	},
	"widget-accordion-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-text-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-base-widget-ptr//size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			res := arg0Val.Size()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-base-widget-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-menu-ptr//dismiss": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dismiss")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dismiss")
			}
			arg0Val.Dismiss()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//selected-index": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-index")
			}
			res := arg0Val.SelectedIndex()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"container-split-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*container.Split)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"fyne-position//subtract": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "subtract")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "subtract")
			}
			res := arg0Val.Subtract(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-paragraph-segment-ptr//segments": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			res := arg0Val.Segments()
			return *env.NewNative(ps.Idx, res, "widget-rich-text-segment-arr")
		},
	},
	"widget-accordion-ptr//close": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "close")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "close")
			}
			arg0Val.Close(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"widget-base-widget-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-label-ptr//extend-base-widget": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val.ExtendBaseWidget(arg1Val)
			return arg0Nat
		},
	},
	"widget-simple-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-simple-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-simple-renderer")
			}
			res := widget.NewSimpleRenderer(arg0Val)
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-v-scroll": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-scroll")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-scroll")
			}
			res := container.NewVScroll(arg0Val)
			return *env.NewNative(ps.Idx, res, "container-scroll-ptr")
		},
	},
	"fyne-container": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container")
			}
			res := fyne.NewContainer(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-separator-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-progress-bar-infinite-ptr//stop": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "stop")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "stop")
			}
			arg0Val.Stop()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//disable-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "disable-index")
			}
			arg0Val.DisableIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-h-scroll": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-scroll")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-scroll")
			}
			res := container.NewHScroll(arg0Val)
			return *env.NewNative(ps.Idx, res, "container-scroll-ptr")
		},
	},
	"widget-hyperlink-ptr//typed-key": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val.TypedKey(arg1Val)
			return arg0Nat
		},
	},
	"widget-image-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//typed-shortcut": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Shortcut)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val.TypedShortcut(arg1Val)
			return arg0Nat
		},
	},
	"container-tab-item-ptr//disabled": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			arg0Val, ok := arg0Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			res := arg0Val.Disabled()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-entry-ptr//unbind": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val.Unbind()
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//focus-lost": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val.FocusLost()
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//set-url": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-url")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-url")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-url")
			}
			arg1Val, ok := arg1Nat.Value.(*url.URL)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-url")
			}
			arg0Val.SetURL(arg1Val)
			return arg0Nat
		},
	},
	"container-v-split": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-split")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-split")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-v-split")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-v-split")
			}
			res := container.NewVSplit(arg0Val, arg1Val)
			return *env.NewNative(ps.Idx, res, "container-split-ptr")
		},
	},
	"widget-accordion-ptr//open-all": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open-all")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "open-all")
			}
			arg0Val.OpenAll()
			return arg0Nat
		},
	},
	"widget-toolbar-action-ptr//set-icon": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ToolbarAction)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-icon")
			}
			arg0Val.SetIcon(arg1Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//selected": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected")
			}
			res := arg0Val.Selected()
			return *env.NewNative(ps.Idx, res, "container-tab-item-ptr")
		},
	},
	"widget-entry-ptr//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"container-split-ptr//extend-base-widget": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val, ok := arg0Nat.Value.(*container.Split)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val.ExtendBaseWidget(arg1Val)
			return arg0Nat
		},
	},
	"widget-rich-text-ptr//string": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "string")
			}
			res := arg0Val.String()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-disableable-widget-ptr//disabled": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.DisableableWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			res := arg0Val.Disabled()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"container-app-tabs-ptr//append": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "append")
			}
			arg0Val.Append(arg1Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//selected-index": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-index")
			}
			res := arg0Val.SelectedIndex()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"container-grid-with-columns": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Int, ok := arg0.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.IntegerType}, "container-grid-with-columns")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-with-columns")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-with-columns")
			}
			res := container.NewGridWithColumns(int(arg0Int.Value), arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-hyperlink-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-entry-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"widget-accordion-ptr//remove": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg1Val, ok := arg1Nat.Value.(*widget.AccordionItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "remove")
			}
			arg0Val.Remove(arg1Val)
			return arg0Nat
		},
	},
	"widget-label-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"container-doc-tabs": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-doc-tabs")
			}
			arg0Val, ok := arg0Nat.Value.([]*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-doc-tabs")
			}
			res := container.NewDocTabs(arg0Val...)
			return *env.NewNative(ps.Idx, res, "container-doc-tabs-ptr")
		},
	},
	"widget-label-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-progress-bar-infinite-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"widget-show-pop-up-at-relative-position": {
		Argsn: 4,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			arg3Val, ok := arg3Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-show-pop-up-at-relative-position")
			}
			widget.ShowPopUpAtRelativePosition(arg0Val, arg1Val, arg2Val, arg3Val)
			return nil
		},
	},
	"container-app-tabs-ptr//select": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val)
			return arg0Nat
		},
	},
	"fyne-container-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-card-ptr//set-content": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-content")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-content")
			}
			arg0Val.SetContent(arg1Val)
			return arg0Nat
		},
	},
	"widget-progress-bar-infinite-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-pop-up-menu-ptr//show-at-relative-position": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "show-at-relative-position")
			}
			arg0Val.ShowAtRelativePosition(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//set-tab-location": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg1Val, ok := arg1Nat.Value.(container.TabLocation)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg0Val.SetTabLocation(arg1Val)
			return arg0Nat
		},
	},
	"fyne-size": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-size")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-size")
			}
			res := fyne.NewSize(float32(arg0Dec.Value), float32(arg1Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-card-ptr//set-title": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-title")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-title")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-title")
			}
			arg0Val.SetTitle(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-entry-ptr//set-place-holder": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-place-holder")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-place-holder")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-place-holder")
			}
			arg0Val.SetPlaceHolder(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-current-app": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := fyne.CurrentApp()
			return *env.NewNative(ps.Idx, res, "fyne-app")
		},
	},
	"widget-list-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-slider-ptr//focus-gained": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val.FocusGained()
			return arg0Nat
		},
	},
	"widget-slider-ptr//mouse-moved": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg0Val.MouseMoved(arg1Val)
			return arg0Nat
		},
	},
	"widget-slider-ptr//mouse-out": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-out")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-out")
			}
			arg0Val.MouseOut()
			return arg0Nat
		},
	},
	"widget-select-entry-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-hyperlink-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-image-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-menu-ptr//activate-previous": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-previous")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-previous")
			}
			arg0Val.ActivatePrevious()
			return arg0Nat
		},
	},
	"widget-text-grid-ptr//set-style": {
		Argsn: 4,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-style")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-style")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-style")
			}
			arg2Int, ok := arg2.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.IntegerType}, "set-style")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "set-style")
			}
			arg3Val, ok := arg3Nat.Value.(widget.TextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "set-style")
			}
			arg0Val.SetStyle(int(arg1Int.Value), int(arg2Int.Value), arg3Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//typed-key": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val.TypedKey(arg1Val)
			return arg0Nat
		},
	},
	"widget-text-grid-ptr//text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "text")
			}
			res := arg0Val.Text()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-file-icon": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-file-icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.URI)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-file-icon")
			}
			res := widget.NewFileIcon(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-file-icon-ptr")
		},
	},
	"widget-text-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-progress-bar-infinite": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewProgressBarInfinite()
			return *env.NewNative(ps.Idx, res, "widget-progress-bar-infinite-ptr")
		},
	},
	"widget-menu-ptr//trigger-last": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "trigger-last")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "trigger-last")
			}
			arg0Val.TriggerLast()
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//disable-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-item")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "disable-item")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "disable-item")
			}
			arg0Val.DisableItem(arg1Val)
			return arg0Nat
		},
	},
	"container-stack": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-stack")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-stack")
			}
			res := container.NewStack(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-form-ptr//disable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val.Disable()
			return arg0Nat
		},
	},
	"widget-entry-ptr//extend-base-widget": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val.ExtendBaseWidget(arg1Val)
			return arg0Nat
		},
	},
	"widget-pop-up-menu-ptr//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"widget-pop-up-menu-ptr//typed-key": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val.TypedKey(arg1Val)
			return arg0Nat
		},
	},
	"fyne-is-vertical": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-is-vertical")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.DeviceOrientation)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-is-vertical")
			}
			res := fyne.IsVertical(arg0Val)
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-image-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-slider-ptr//typed-key": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-key")
			}
			arg0Val.TypedKey(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//accepts-tab": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "accepts-tab")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "accepts-tab")
			}
			res := arg0Val.AcceptsTab()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-rich-text-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-pop-up-menu-ptr//focus-lost": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val.FocusLost()
			return arg0Nat
		},
	},
	"widget-select-entry-ptr//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"widget-rich-text-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-progress-bar-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBar)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"container-app-tabs-ptr//remove-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "remove-index")
			}
			arg0Val.RemoveIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//enable-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "enable-index")
			}
			arg0Val.EnableIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-tab-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "container-tab-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-tab-item")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-tab-item")
			}
			res := container.NewTabItem(arg0Str.Value, arg1Val)
			return *env.NewNative(ps.Idx, res, "container-tab-item-ptr")
		},
	},
	"app-with-id": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "app-with-id")
			}
			res := app.NewWithID(arg0Str.Value)
			return *env.NewNative(ps.Idx, res, "fyne-app")
		},
	},
	"fyne-square-offset-pos": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-square-offset-pos")
			}
			res := fyne.NewSquareOffsetPos(float32(arg0Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-form-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-form-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-form-item")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-form-item")
			}
			res := widget.NewFormItem(arg0Str.Value, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-form-item-ptr")
		},
	},
	"widget-base-widget-ptr//visible": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			res := arg0Val.Visible()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-label-ptr//unbind": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unbind")
			}
			arg0Val.Unbind()
			return arg0Nat
		},
	},
	"widget-progress-bar-infinite-ptr//running": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "running")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "running")
			}
			res := arg0Val.Running()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-label-ptr//bind": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg1Val, ok := arg1Nat.Value.(binding.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg0Val.Bind(arg1Val)
			return arg0Nat
		},
	},
	"widget-progress-bar-with-data": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-progress-bar-with-data")
			}
			arg0Val, ok := arg0Nat.Value.(binding.Float)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-progress-bar-with-data")
			}
			res := widget.NewProgressBarWithData(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-progress-bar-ptr")
		},
	},
	"container-app-tabs-ptr//select-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "select-index")
			}
			arg0Val.SelectIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"fyne-container-ptr//position": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			res := arg0Val.Position()
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-paragraph-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-separator-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-hyperlink-ptr//mouse-moved": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-moved")
			}
			arg0Val.MouseMoved(arg1Val)
			return arg0Nat
		},
	},
	"fyne-static-resource-ptr//content": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.StaticResource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "content")
			}
			res := arg0Val.Content()
			return *env.NewNative(ps.Idx, res, "byte-arr")
		},
	},
	"fyne-container-ptr//size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "size")
			}
			res := arg0Val.Size()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-slider-ptr//dragged": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.DragEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val.Dragged(arg1Val)
			return arg0Nat
		},
	},
	"container-padded": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-padded")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-padded")
			}
			res := container.NewPadded(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"fyne-container-without-layout": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container-without-layout")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "fyne-container-without-layout")
			}
			res := fyne.NewContainerWithoutLayout(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-select-entry-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-hyperlink-ptr//mouse-in": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-in")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-in")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-in")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-in")
			}
			arg0Val.MouseIn(arg1Val)
			return arg0Nat
		},
	},
	"widget-icon-ptr//set-resource": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-resource")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Icon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-resource")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-resource")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-resource")
			}
			arg0Val.SetResource(arg1Val)
			return arg0Nat
		},
	},
	"widget-label-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Label)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-doc-tabs-ptr//select": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val)
			return arg0Nat
		},
	},
	"widget-text-grid": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewTextGrid()
			return *env.NewNative(ps.Idx, res, "widget-text-grid-ptr")
		},
	},
	"widget-show-pop-up-at-position": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-show-pop-up-at-position")
			}
			widget.ShowPopUpAtPosition(arg0Val, arg1Val, arg2Val)
			return nil
		},
	},
	"widget-form-ptr//append": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "append")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "append")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "append")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "append")
			}
			arg0Val.Append(arg1Str.Value, arg2Val)
			return arg0Nat
		},
	},
	"widget-menu-ptr//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"fyne-shortcut-handler-ptr//typed-shortcut": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.ShortcutHandler)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Shortcut)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "typed-shortcut")
			}
			arg0Val.TypedShortcut(arg1Val)
			return arg0Nat
		},
	},
	"fyne-min": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-min")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-min")
			}
			res := fyne.Min(float32(arg0Dec.Value), float32(arg1Dec.Value))
			return *env.NewNative(ps.Idx, res, "float32")
		},
	},
	"widget-progress-bar-infinite-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-progress-bar-infinite-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-entry-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-entry-ptr//dragged": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "dragged")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.DragEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "dragged")
			}
			arg0Val.Dragged(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//key-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "key-up")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "key-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "key-up")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "key-up")
			}
			arg0Val.KeyUp(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//extend-base-widget": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Widget)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "extend-base-widget")
			}
			arg0Val.ExtendBaseWidget(arg1Val)
			return arg0Nat
		},
	},
	"widget-slider-ptr//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"widget-custom-text-grid-style-ptr//background-color": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.CustomTextGridStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "background-color")
			}
			res := arg0Val.BackgroundColor()
			return *env.NewNative(ps.Idx, res, "color-color")
		},
	},
	"widget-slider": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "widget-slider")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "widget-slider")
			}
			res := widget.NewSlider(arg0Dec.Value, arg1Dec.Value)
			return *env.NewNative(ps.Idx, res, "widget-slider-ptr")
		},
	},
	"widget-hyperlink-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//enable-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-item")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "enable-item")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "enable-item")
			}
			arg0Val.EnableItem(arg1Val)
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-menu-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-image-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-pop-up-menu-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"widget-text-grid-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-select-entry-ptr//disable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SelectEntry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val.Disable()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//selected": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected")
			}
			res := arg0Val.Selected()
			return *env.NewNative(ps.Idx, res, "container-tab-item-ptr")
		},
	},
	"widget-hyperlink-segment-ptr//select": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "select")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "select")
			}
			arg0Val.Select(arg1Val, arg2Val)
			return arg0Nat
		},
	},
	"widget-separator-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Separator)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-progress-bar": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewProgressBar()
			return *env.NewNative(ps.Idx, res, "widget-progress-bar-ptr")
		},
	},
	"container-app-tabs-ptr//current-tab-index": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "current-tab-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "current-tab-index")
			}
			res := arg0Val.CurrentTabIndex()
			return *env.NewNative(ps.Idx, res, "int")
		},
	},
	"fyne-size//min": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "min")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "min")
			}
			res := arg0Val.Min(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-rich-text-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-base-widget-ptr//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"container-h-box": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-box")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-h-box")
			}
			res := container.NewHBox(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-image-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-hyperlink-ptr//focus-gained": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val.FocusGained()
			return arg0Nat
		},
	},
	"widget-hyperlink-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-image-segment-ptr//inline": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "inline")
			}
			res := arg0Val.Inline()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-slider-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-base-widget-ptr//position": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "position")
			}
			res := arg0Val.Position()
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-entry-ptr//touch-down": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-down")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-down")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-down")
			}
			arg1Val, ok := arg1Nat.Value.(*mobile.TouchEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-down")
			}
			arg0Val.TouchDown(arg1Val)
			return arg0Nat
		},
	},
	"widget-label-with-data": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-label-with-data")
			}
			arg0Val, ok := arg0Nat.Value.(binding.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-label-with-data")
			}
			res := widget.NewLabelWithData(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-label-ptr")
		},
	},
	"fyne-container-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-text-grid-ptr//row-text": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "row-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "row-text")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "row-text")
			}
			res := arg0Val.RowText(int(arg1Int.Value))
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-slider-ptr//focus-lost": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val.FocusLost()
			return arg0Nat
		},
	},
	"app-set-metadata": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "app-set-metadata")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.AppMetadata)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "app-set-metadata")
			}
			app.SetMetadata(arg0Val)
			return nil
		},
	},
	"widget-hyperlink-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"container-doc-tabs-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-grid-with-rows": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Int, ok := arg0.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.IntegerType}, "container-grid-with-rows")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-with-rows")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-grid-with-rows")
			}
			res := container.NewGridWithRows(int(arg0Int.Value), arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-hyperlink-with-style": {
		Argsn: 4,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-hyperlink-with-style")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			arg1Val, ok := arg1Nat.Value.(*url.URL)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.TextAlign)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			arg3Nat, ok := arg3.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			arg3Val, ok := arg3Nat.Value.(fyne.TextStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 3, []env.Type{env.NativeType}, "widget-hyperlink-with-style")
			}
			res := widget.NewHyperlinkWithStyle(arg0Str.Value, arg1Val, arg2Val, arg3Val)
			return *env.NewNative(ps.Idx, res, "widget-hyperlink-ptr")
		},
	},
	"container-max": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-max")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-max")
			}
			res := container.NewMax(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-list-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-file-icon-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.FileIcon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-rich-text-ptr//parse-markdown": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "parse-markdown")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "parse-markdown")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "parse-markdown")
			}
			arg0Val.ParseMarkdown(arg1Str.Value)
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//mouse-out": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-out")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-out")
			}
			arg0Val.MouseOut()
			return arg0Nat
		},
	},
	"widget-slider-with-data": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "widget-slider-with-data")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "widget-slider-with-data")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-slider-with-data")
			}
			arg2Val, ok := arg2Nat.Value.(binding.Float)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-slider-with-data")
			}
			res := widget.NewSliderWithData(arg0Dec.Value, arg1Dec.Value, arg2Val)
			return *env.NewNative(ps.Idx, res, "widget-slider-ptr")
		},
	},
	"fyne-size//max": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "max")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "max")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "max")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "max")
			}
			res := arg0Val.Max(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-separator-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-pop-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-pop-up")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-pop-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-pop-up")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-pop-up")
			}
			res := widget.NewPopUp(arg0Val, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-pop-up-ptr")
		},
	},
	"fyne-static-resource-ptr//go-string": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "go-string")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.StaticResource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "go-string")
			}
			res := arg0Val.GoString()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-menu-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"container-doc-tabs-ptr//select-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "select-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "select-index")
			}
			arg0Val.SelectIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"widget-card-ptr//set-image": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-image")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-image")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-image")
			}
			arg1Val, ok := arg1Nat.Value.(*canvas.Image)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-image")
			}
			arg0Val.SetImage(arg1Val)
			return arg0Nat
		},
	},
	"widget-icon": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-icon")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Resource)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-icon")
			}
			res := widget.NewIcon(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-icon-ptr")
		},
	},
	"fyne-position//is-zero": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			res := arg0Val.IsZero()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-container-ptr//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//mouse-down": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-down")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-down")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-down")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-down")
			}
			arg0Val.MouseDown(arg1Val)
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//show-at-position": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-position")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show-at-position")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-position")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "show-at-position")
			}
			arg0Val.ShowAtPosition(arg1Val)
			return arg0Nat
		},
	},
	"widget-hyperlink-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-entry-ptr//double-tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "double-tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "double-tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "double-tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "double-tapped")
			}
			arg0Val.DoubleTapped(arg1Val)
			return arg0Nat
		},
	},
	"widget-base-widget-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//set-tab-location": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg1Val, ok := arg1Nat.Value.(container.TabLocation)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-tab-location")
			}
			arg0Val.SetTabLocation(arg1Val)
			return arg0Nat
		},
	},
	"fyne-container-ptr//refresh": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "refresh")
			}
			arg0Val.Refresh()
			return arg0Nat
		},
	},
	"widget-card-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-list-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"fyne-menu": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "fyne-menu")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "fyne-menu")
			}
			arg1Val, ok := arg1Nat.Value.([]*fyne.MenuItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "fyne-menu")
			}
			res := fyne.NewMenu(arg0Str.Value, arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-menu-ptr")
		},
	},
	"widget-entry-ptr//key-down": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "key-down")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "key-down")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "key-down")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.KeyEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "key-down")
			}
			arg0Val.KeyDown(arg1Val)
			return arg0Nat
		},
	},
	"widget-card": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-card")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "widget-card")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-card")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-card")
			}
			res := widget.NewCard(arg0Str.Value, arg1Str.Value, arg2Val)
			return *env.NewNative(ps.Idx, res, "widget-card-ptr")
		},
	},
	"widget-label-with-style": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-label-with-style")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-label-with-style")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.TextAlign)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-label-with-style")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-label-with-style")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.TextStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "widget-label-with-style")
			}
			res := widget.NewLabelWithStyle(arg0Str.Value, arg1Val, arg2Val)
			return *env.NewNative(ps.Idx, res, "widget-label-ptr")
		},
	},
	"widget-menu-ptr//activate-next": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-next")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "activate-next")
			}
			arg0Val.ActivateNext()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//disable-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-item")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "disable-item")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "disable-item")
			}
			arg0Val.DisableItem(arg1Val)
			return arg0Nat
		},
	},
	"fyne-pos": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Dec, ok := arg0.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.DecimalType}, "fyne-pos")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-pos")
			}
			res := fyne.NewPos(float32(arg0Dec.Value), float32(arg1Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-rich-text-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.RichText)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-ptr//drag-end": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val.DragEnd()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-menu": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-menu")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-menu")
			}
			res := widget.NewMenu(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-menu-ptr")
		},
	},
	"widget-pop-up-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"widget-entry-with-data": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-entry-with-data")
			}
			arg0Val, ok := arg0Nat.Value.(binding.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-entry-with-data")
			}
			res := widget.NewEntryWithData(arg0Val)
			return *env.NewNative(ps.Idx, res, "widget-entry-ptr")
		},
	},
	"widget-entry-ptr//focus-lost": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-lost")
			}
			arg0Val.FocusLost()
			return arg0Nat
		},
	},
	"container-without-layout": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-without-layout")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-without-layout")
			}
			res := container.NewWithoutLayout(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"fyne-container-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"widget-paragraph-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-slider-ptr//drag-end": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "drag-end")
			}
			arg0Val.DragEnd()
			return arg0Nat
		},
	},
	"app": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := app.New()
			return *env.NewNative(ps.Idx, res, "fyne-app")
		},
	},
	"widget-list-segment-ptr//segments": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "segments")
			}
			res := arg0Val.Segments()
			return *env.NewNative(ps.Idx, res, "widget-rich-text-segment-arr")
		},
	},
	"widget-paragraph-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-pop-up-menu-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//tapped": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped")
			}
			arg0Val.Tapped(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//enable-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "enable-index")
			}
			arg0Val.EnableIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//remove-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "remove-index")
			}
			arg0Val.RemoveIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-split-ptr//set-offset": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-offset")
			}
			arg0Val, ok := arg0Nat.Value.(*container.Split)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-offset")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "set-offset")
			}
			arg0Val.SetOffset(arg1Dec.Value)
			return arg0Nat
		},
	},
	"widget-accordion-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-accordion-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-accordion-item")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-accordion-item")
			}
			res := widget.NewAccordionItem(arg0Str.Value, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-accordion-item-ptr")
		},
	},
	"widget-pop-up-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-position//add": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			res := arg0Val.Add(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-pop-up-menu-ptr//focus-gained": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUpMenu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "focus-gained")
			}
			arg0Val.FocusGained()
			return arg0Nat
		},
	},
	"widget-file-icon-ptr//set-selected": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-selected")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.FileIcon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-selected")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-selected")
			}
			arg0Val.SetSelected(arg1Int.Value != 0)
			return arg0Nat
		},
	},
	"widget-text-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-menu-ptr//deactivate-child": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "deactivate-child")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "deactivate-child")
			}
			arg0Val.DeactivateChild()
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//move": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "move")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "move")
			}
			arg0Val.Move(arg1Val)
			return arg0Nat
		},
	},
	"widget-modal-pop-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-modal-pop-up")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-modal-pop-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-modal-pop-up")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-modal-pop-up")
			}
			res := widget.NewModalPopUp(arg0Val, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-pop-up-ptr")
		},
	},
	"container-app-tabs-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-hyperlink-segment-ptr//unselect": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.HyperlinkSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "unselect")
			}
			arg0Val.Unselect()
			return arg0Nat
		},
	},
	"widget-separator-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.SeparatorSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-text-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-entry-ptr//validate": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "validate")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "validate")
			}
			res := arg0Val.Validate()
			return *env.NewNative(ps.Idx, res, "error")
		},
	},
	"widget-entry-ptr//touch-cancel": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-cancel")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-cancel")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-cancel")
			}
			arg1Val, ok := arg1Nat.Value.(*mobile.TouchEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-cancel")
			}
			arg0Val.TouchCancel(arg1Val)
			return arg0Nat
		},
	},
	"widget-hyperlink-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Hyperlink)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-delta//is-zero": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Delta)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "is-zero")
			}
			res := arg0Val.IsZero()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"fyne-size//subtract-width-height": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract-width-height")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract-width-height")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "subtract-width-height")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "subtract-width-height")
			}
			res := arg0Val.SubtractWidthHeight(float32(arg1Dec.Value), float32(arg2Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-disableable-widget-ptr//enable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.DisableableWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val.Enable()
			return arg0Nat
		},
	},
	"widget-password-entry": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewPasswordEntry()
			return *env.NewNative(ps.Idx, res, "widget-entry-ptr")
		},
	},
	"fyne-log-error": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "fyne-log-error")
			}
			arg1Err, ok := arg1.(env.Error)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.ErrorType}, "fyne-log-error")
			}
			fyne.LogError(arg0Str.Value, errors.New(arg1Err.Print(*ps.Idx)))
			return nil
		},
	},
	"widget-rich-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-rich-text")
			}
			arg0Val, ok := arg0Nat.Value.([]widget.RichTextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-rich-text")
			}
			res := widget.NewRichText(arg0Val...)
			return *env.NewNative(ps.Idx, res, "widget-rich-text-ptr")
		},
	},
	"widget-paragraph-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ParagraphSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-pop-up-ptr//tapped-secondary": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg1Val, ok := arg1Nat.Value.(*fyne.PointEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "tapped-secondary")
			}
			arg0Val.TappedSecondary(arg1Val)
			return arg0Nat
		},
	},
	"widget-text-grid-from-string": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-text-grid-from-string")
			}
			res := widget.NewTextGridFromString(arg0Str.Value)
			return *env.NewNative(ps.Idx, res, "widget-text-grid-ptr")
		},
	},
	"widget-entry-ptr//set-min-rows-visible": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-min-rows-visible")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-min-rows-visible")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "set-min-rows-visible")
			}
			arg0Val.SetMinRowsVisible(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//set-items": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-items")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-items")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-items")
			}
			arg1Val, ok := arg1Nat.Value.([]*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "set-items")
			}
			arg0Val.SetItems(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//enable-item": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-item")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable-item")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "enable-item")
			}
			arg1Val, ok := arg1Nat.Value.(*container.TabItem)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "enable-item")
			}
			arg0Val.EnableItem(arg1Val)
			return arg0Nat
		},
	},
	"widget-separator": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewSeparator()
			return *env.NewNative(ps.Idx, res, "widget-separator-ptr")
		},
	},
	"widget-show-pop-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-show-pop-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-show-pop-up")
			}
			widget.ShowPopUp(arg0Val, arg1Val)
			return nil
		},
	},
	"widget-slider-ptr//bind": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "bind")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg1Val, ok := arg1Nat.Value.(binding.Float)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "bind")
			}
			arg0Val.Bind(arg1Val)
			return arg0Nat
		},
	},
	"widget-form-ptr//enable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "enable")
			}
			arg0Val.Enable()
			return arg0Nat
		},
	},
	"widget-entry-ptr//touch-up": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-up")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "touch-up")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-up")
			}
			arg1Val, ok := arg1Nat.Value.(*mobile.TouchEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "touch-up")
			}
			arg0Val.TouchUp(arg1Val)
			return arg0Nat
		},
	},
	"fyne-measure-text": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "fyne-measure-text")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "fyne-measure-text")
			}
			arg2Nat, ok := arg2.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "fyne-measure-text")
			}
			arg2Val, ok := arg2Nat.Value.(fyne.TextStyle)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.NativeType}, "fyne-measure-text")
			}
			res := fyne.MeasureText(arg0Str.Value, float32(arg1Dec.Value), arg2Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-size//add-width-height": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-width-height")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add-width-height")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "add-width-height")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "add-width-height")
			}
			res := arg0Val.AddWidthHeight(float32(arg1Dec.Value), float32(arg2Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"fyne-size//add": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "add")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Vector2)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "add")
			}
			res := arg0Val.Add(arg1Val)
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-slider-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-text-grid-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-base-widget-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.BaseWidget)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//current-tab": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "current-tab")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "current-tab")
			}
			res := arg0Val.CurrentTab()
			return *env.NewNative(ps.Idx, res, "container-tab-item-ptr")
		},
	},
	"widget-icon-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Icon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"widget-progress-bar-infinite-ptr//start": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "start")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ProgressBarInfinite)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "start")
			}
			arg0Val.Start()
			return arg0Nat
		},
	},
	"widget-entry-ptr//cursor": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cursor")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "cursor")
			}
			res := arg0Val.Cursor()
			return *env.NewNative(ps.Idx, res, "desktop-cursor")
		},
	},
	"widget-slider-ptr//mouse-in": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-in")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "mouse-in")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-in")
			}
			arg1Val, ok := arg1Nat.Value.(*desktop.MouseEvent)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "mouse-in")
			}
			arg0Val.MouseIn(arg1Val)
			return arg0Nat
		},
	},
	"widget-pop-up-ptr//hide": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "hide")
			}
			arg0Val.Hide()
			return arg0Nat
		},
	},
	"container-doc-tabs-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*container.DocTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-text-segment-ptr//selected-text": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "selected-text")
			}
			res := arg0Val.SelectedText()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-pop-up-ptr//show": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.PopUp)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "show")
			}
			arg0Val.Show()
			return arg0Nat
		},
	},
	"widget-rich-text-from-markdown": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Str, ok := arg0.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.StringType}, "widget-rich-text-from-markdown")
			}
			res := widget.NewRichTextFromMarkdown(arg0Str.Value)
			return *env.NewNative(ps.Idx, res, "widget-rich-text-ptr")
		},
	},
	"widget-image-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ImageSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"widget-form-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-text-segment-ptr//update": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "update")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "update")
			}
			arg0Val.Update(arg1Val)
			return arg0Nat
		},
	},
	"container-app-tabs-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*container.AppTabs)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
	"fyne-container-ptr//remove-all": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-all")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-all")
			}
			arg0Val.RemoveAll()
			return arg0Nat
		},
	},
	"widget-list-segment-ptr//textual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "textual")
			}
			res := arg0Val.Textual()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"widget-icon-ptr//min-size": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Icon)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "min-size")
			}
			res := arg0Val.MinSize()
			return *env.NewNative(ps.Idx, res, "fyne-size")
		},
	},
	"widget-text-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-form-ptr//disabled": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Form)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disabled")
			}
			res := arg0Val.Disabled()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-multi-line-entry": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := widget.NewMultiLineEntry()
			return *env.NewNative(ps.Idx, res, "widget-entry-ptr")
		},
	},
	"widget-entry-ptr//disable": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Entry)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "disable")
			}
			arg0Val.Disable()
			return arg0Nat
		},
	},
	"widget-pop-up-menu": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-pop-up-menu")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Menu)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "widget-pop-up-menu")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-pop-up-menu")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Canvas)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "widget-pop-up-menu")
			}
			res := widget.NewPopUpMenu(arg0Val, arg1Val)
			return *env.NewNative(ps.Idx, res, "widget-pop-up-menu-ptr")
		},
	},
	"fyne-container-ptr//resize": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "resize")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg1Val, ok := arg1Nat.Value.(fyne.Size)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "resize")
			}
			arg0Val.Resize(arg1Val)
			return arg0Nat
		},
	},
	"fyne-container-ptr//visible": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			arg0Val, ok := arg0Nat.Value.(*fyne.Container)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visible")
			}
			res := arg0Val.Visible()
			return *env.NewNative(ps.Idx, res, "bool")
		},
	},
	"widget-list-segment-ptr//visual": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.ListSegment)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "visual")
			}
			res := arg0Val.Visual()
			return *env.NewNative(ps.Idx, res, "fyne-canvas-object")
		},
	},
	"widget-slider-ptr//set-value": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-value")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Slider)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-value")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "set-value")
			}
			arg0Val.SetValue(arg1Dec.Value)
			return arg0Nat
		},
	},
	"container-adaptive-grid": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Int, ok := arg0.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.IntegerType}, "container-adaptive-grid")
			}
			arg1Nat, ok := arg1.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-adaptive-grid")
			}
			arg1Val, ok := arg1Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.NativeType}, "container-adaptive-grid")
			}
			res := container.NewAdaptiveGrid(int(arg0Int.Value), arg1Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"widget-card-ptr//set-sub-title": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-sub-title")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Card)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "set-sub-title")
			}
			arg1Str, ok := arg1.(env.String)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.StringType}, "set-sub-title")
			}
			arg0Val.SetSubTitle(arg1Str.Value)
			return arg0Nat
		},
	},
	"fyne-current-device": {
		Argsn: 0,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			res := fyne.CurrentDevice()
			return *env.NewNative(ps.Idx, res, "fyne-device")
		},
	},
	"app-settings-schema-ptr//storage-path": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "storage-path")
			}
			arg0Val, ok := arg0Nat.Value.(*app.SettingsSchema)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "storage-path")
			}
			res := arg0Val.StoragePath()
			return *env.NewNative(ps.Idx, res, "string")
		},
	},
	"container-v-box": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-box")
			}
			arg0Val, ok := arg0Nat.Value.([]fyne.CanvasObject)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "container-v-box")
			}
			res := container.NewVBox(arg0Val...)
			return *env.NewNative(ps.Idx, res, "fyne-container-ptr")
		},
	},
	"fyne-position//subtract-xy": {
		Argsn: 3,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract-xy")
			}
			arg0Val, ok := arg0Nat.Value.(fyne.Position)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "subtract-xy")
			}
			arg1Dec, ok := arg1.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.DecimalType}, "subtract-xy")
			}
			arg2Dec, ok := arg2.(env.Decimal)
			if !ok {
				return evaldo.MakeArgError(ps, 2, []env.Type{env.DecimalType}, "subtract-xy")
			}
			res := arg0Val.SubtractXY(float32(arg1Dec.Value), float32(arg2Dec.Value))
			return *env.NewNative(ps.Idx, res, "fyne-position")
		},
	},
	"widget-accordion-ptr//remove-index": {
		Argsn: 2,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.Accordion)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "remove-index")
			}
			arg1Int, ok := arg1.(env.Integer)
			if !ok {
				return evaldo.MakeArgError(ps, 1, []env.Type{env.IntegerType}, "remove-index")
			}
			arg0Val.RemoveIndex(int(arg1Int.Value))
			return arg0Nat
		},
	},
	"widget-text-grid-ptr//create-renderer": {
		Argsn: 1,
		Fn: func(ps *env.ProgramState, arg0 env.Object, arg1 env.Object, arg2 env.Object, arg3 env.Object, arg4 env.Object) env.Object {
			arg0Nat, ok := arg0.(env.Native)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			arg0Val, ok := arg0Nat.Value.(*widget.TextGrid)
			if !ok {
				return evaldo.MakeArgError(ps, 0, []env.Type{env.NativeType}, "create-renderer")
			}
			res := arg0Val.CreateRenderer()
			return *env.NewNative(ps.Idx, res, "fyne-widget-renderer")
		},
	},
}
